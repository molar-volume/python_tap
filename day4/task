In all following exercises, use two modules:
a) <name>.py module, where logic of your implementation is hidden
b) main.py module with main function, that tests your implementation on a CSV or JSON file of your choice.

1. Write a Python program that reads a CSV file and remove initial spaces, quotes around each entry and the delimiter.
2. Write a Python program to write a Python list of lists to a csv file. After writing the CSV file read the CSV file to dictionary and display content.
3. Write a Python program that displays only unique values of the JSON object.
4. Let's have a function:
    def hello():
        return "hello world"

    Write and apply three decorators:
    a) bold (that encloses output of the function in <b></b> html tags, e.g. "<b> hello world </b>")
    b) italic (<i> </i>)
    c) underline (<u> </u>)


5. Rewrite following script to python

#!/bin/bash
# realname.sh
#
# From username, gets "real name" from /etc/passwd.


ARGCOUNT=1       # Expect one arg.
E_WRONGARGS=65

file=/etc/passwd
pattern=$1

if [ $# -ne "$ARGCOUNT" ]
then
  echo "Usage: `basename $0` USERNAME"
  exit $E_WRONGARGS
fi

file_excerpt ()  # Scan file for pattern, then print relevant portion of line.
{
while read line  # "while" does not necessarily need "[ condition ]"
do
  echo "$line" | grep $1 | awk -F":" '{ print $5 }'  # Have awk use ":" delimiter.
done
} <$file  # Redirect into function's stdin.

file_excerpt $pattern

# Yes, this entire script could be reduced to
#       grep PATTERN /etc/passwd | awk -F":" '{ print $5 }'
# or
#       awk -F: '/PATTERN/ {print $5}'
# or
#       awk -F: '($1 == "username") { print $5 }' # real name from username
# However, it might not be as instructive.
